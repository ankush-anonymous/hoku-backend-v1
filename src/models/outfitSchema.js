const mongoose = require('mongoose');

const OutfitSchema = new mongoose.Schema({
    // --- Core Identifiers ---
    user_id: {
        type: String, // UUID from your 'users' table in PostgreSQL
        required: true,
        index: true
    },
    wardrobe_id: {
        type: String, // UUID from your 'wardrobes' table
        index: true
    },

    // --- Basic Information ---
    name: {
        type: String,
        required: true,
        trim: true
    },
    description: {
        type: String,
        default: ""
    },
    // A representative image of the entire outfit
    outfit_image_url: {
        type: String,
        default: null
    },

    // --- Composition ---
    dress_components: [{
        // Reference to the Dress document using its MongoDB ObjectId
        dress_id: {
            type: mongoose.Schema.Types.ObjectId,
            ref: 'Dress',
            required: true
        },
        // The type of item this is within the outfit (e.g., "top", "shoes")
        // This links to the 'dress_types' table in PostgreSQL
        dress_type_id: {
            type: String,
            required: true
        }
    }],

styling_aesthetics: {
type: [String], // e.g., ['minimalist', 'bohemian', 'edgy']
default: []
},

    // --- Creation Context ---
    composed_by: {
        type: String,
        enum: ["user", "ai_suggestion"], // Simplified
        required: true
    },
    // Links to the log entry if this was an AI suggestion
    source_log_id: {
        type: String, // UUID from 'ai_suggestion_logs' or 'user_actions_log'
        default: null
    },

    // --- AI-Generated & Analytical Fields ---
    overall_color_palette: [{
        name: String,   // e.g., "Midnight Blue"
        hex: String,    // e.g., "#003366"
        coverage: Number // Percentage coverage in the outfit (0-1)
    }],
    ai_features: {
        // Vector representation of the entire outfit for similarity search
        embedding: {
            type: [Number],
            default: []
        },
        // Tags generated by AI analysis of the combined outfit
        generated_tags: {
            type: [String],
            default: []
        }
    },
    // --- User-Specific Context ---
    is_favorite: {
        type: Boolean,
        default: false,
        index: true
    },
    user_preferences: {
        type:Number,
        enum:[0,1]
    },
    tags: { // User-defined tags
        type: [String],
        default: []
    }
}, {
    timestamps: true // Automatically adds createdAt and updatedAt fields
});

// Create the Mongoose Model
const Outfit = mongoose.model('Outfit', OutfitSchema);

module.exports = Outfit;